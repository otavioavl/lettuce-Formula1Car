***

	PME-5429 | Multiscale Methods (2020)

	Lattice Boltzmann Method:
	An Introductory Overview

	Adriano Grigolo
	adriano.grigolo@usp.br

***


LAB-2: Escoamento interno através de obstáculo
==============================================

Neste tutorial simularemos um escoamento através de um obstáculo no interior
de um canal no qual são impostas condições de contorno de densidade constante
na entrada e na saída (direção x). Para um gás ideal isto equivale à aplicação
de um gradiente de pressão. O esquema 'bounce-back' é utilizado tanto nas paredes
que limitam o domínio (na direção y) como na superfície do obstáculo.


1) Vá para o diretório principal

	$ cd lettuce


2) Configurando a compilação: edite o arquivo 'lb_user_config.h':

	a) escolha o número de threads (exemplo: 2 threads)
	#define _NUMBER_OF_THREADS_ 2

	b) escolha a implementação do termo de força: 'Raw' ou 'ShiftedVelocity' (tanto faz)
	#define _FORCING_STYLE_ 1

	c) ligue as condições de contorno
	#define _BC_INLET_DENSITY_ 1
	#define _BC_OUTLET_DENSITY_ 1


3) Compile o código (aqui nomeamos o executável 'lb.x')

	$ gcc -std=c99 ./code/lb_main.c -o lb.x -lm -fopenmp


4) Chame o executável sem argumentos para ver as informações de input

	$ ./lb.x

	obs: verifique se as macros estão devidamente configuradas


5) Simulação para tempos curtos

	Parâmetros (exemplo):

	[out dir name] = LAB-2
	[topo file] = ./topo/obst_circle-displaced_440x64.topo
	[nt_run] = 4000
	[nt_out] = 50
	[tau] = 0.60
	[rho_ini] = 1.25
	[delta_rho] = 0
	[rand_seed] = 0
	[grav_x] = 0
	[grav_y] = 0
	[rho_inlet] = 1.30
	[rho_outlet] = 1.20
	(rho0) = 0
	(G_ff) = 0
	(G_fs) = 0

	obs: você pode escolher qualquer uma das topologias de obstáculo 'obst_*.topo'
	obs: escolha 'rho_ini' igual ao valor médio das densidades da entrada e saída

	Rode a simulação:

	$ ./lb.x LAB-2 ./topo/formula_440x60.topo 4000 50 0.60 1.25 0 0 0 0 1.30 1.20 0 0 0


6) Visualização do sistema para tempos curtos

	a) Vá para o diretório de output
	$ cd ./LAB-2

	b) Abra o script 'lb-gif.gnu' e ajuste os máximos e mínimos do mapa de cores

	Exemplo:
	# 	>>> adjust color range parameters
	u_cmin     = -0.30 * cs
	u_cmax     =  0.30 * cs
	u2_cmin    = 0.00 * u_cmax**2
	u2_cmax    = 1.00 * u_cmax**2
	rho_cmin   = rho_outlet
	rho_cmax   = rho_inlet

	obs: sempre será preciso fazer esta calibração.

	c) Use o script 'lb-gif.gnu' para gerar os mapas de cores

	ex: módulo quadrado da velocidade (u2):
	$ gnuplot -c lb-gif.gnu 7 0 4000 50 turbo

	d) Visualize o gif

	obs: para visualizar gifs prontos utilize o comando "animate", ex:
	$ animate [arquivo].gif
	$ animate -delay 10 -resize 200% [arquivo].gif


7) Visualização do perfil de velocidade de tempos curtos

	a) Vá para o diretório de output
	$ cd ./LAB-2

	b) Use o script 'lb-profile-y.gnu' para gerar um pdf
	com frames do perfil de velocidade:

	Para visualizar o perfil ux na entrada do domínio escolhemos:
		[xpos] = 1
		[dataColumn] = 5

	obs: os limites determinados para o primeiro gráfico serão mantidos
	nos demais frames, por isso plotamos em ordem inversa, neste exemplo:
		[frame initial] = 4000
		[frame final] = 1
		[frame interval] = -50

	$ gnuplot -c lb-profile-y.gnu 1 5 4000 1 -50 oranges

	obs: você pode escolher outros esquemas de cores

	c) Visualize a evolução do perfil de velocidade no arquivo pdf recém-criado.


8) Compile o código no modo de continuação

	a) Volte para o diretório principal
	$ cd ..

	a) edite arquivo 'lb_user_config.h' e ligue o modo de continuação:
	#define _CONTINUE_MODE_ 1

	b) compile o novo executável 'lb-cont.x'
	$ gcc -std=c99 ./code/lb_main.c -o lb-cont.x -lm -fopenmp


9) Continue a simulação

	Mantenha os parâmetros anteriores, mas propague o sistema por
	um tempo mais longo, de modo a chegar no estado estacionário.

	Exemplo:

	[nt_run] = 30000
	[nt_out] = 1000

	obs: você pode fazer várias continuações se necessário

	Rode a simulação usando o novo executável:

	$./lb.x LAB-2 ./topo/formula_440x60.topo 30000 1000 0.60 1.25 0 0 0 0 1.30 1.20 0 0 0


10) Visualização do sistema para tempos longos

	a) Vá para o diretório de output
	$ cd ./LAB-2

	b) Abra o script 'lb-gif.gnu' e ajuste os máximos e mínimos do mapa de cores

	Exemplo:
	# 	>>> adjust color range parameters
	u_cmin     = -0.30 * cs
	u_cmax     =  0.30 * cs
	u2_cmin    = 0.00 * u_cmax**2
	u2_cmax    = 1.00 * u_cmax**2
	rho_cmin   = rho_outlet
	rho_cmax   = rho_inlet

	obs: sempre será preciso fazer esta calibração.

	c) Use o script 'lb-gif.gnu' para gerar os mapas de cores

	ex: pressão
	$ gnuplot -c lb-gif.gnu 8 0 30000 1000 plasma

	ex: módulo quadrado da velocidade (u2):
	$ gnuplot -c lb-gif.gnu 7 0 30000 1000 plasma

	d) Visualize o gif

	obs: para visualizar gifs prontos utilize o comando "animate", ex:
	$ animate [arquivo].gif
	$ animate -delay 10 -resize 200% [arquivo].gif


11) Visualização do perfil de velocidade para tempos longos

	a) Vá para o diretório de output
	$ cd ./LAB-2

	b) Use o script 'lb-profile-y.gnu' para gerar um pdf com frames do perfil de velocidade
	ex:
	$ gnuplot -c lb-profile-y.gnu 300 5 30000 0 -1000 oranges

	c) Visualize a evolução do perfil no arquivo pdf recém-criado.


12) Questões/exercícios/sugestões:

	a) Analise outros casos variando ligeiramente 'tau', 'rho_inlet' e 'rho_outlet'
	b) Repita o tutorial para outras topologias


***
